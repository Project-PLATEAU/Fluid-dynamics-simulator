{
  "index.html": {
    "href": "index.html",
    "title": "熱流体シミュレーションシステム",
    "keywords": "熱流体シミュレーションシステム 日射や風況等に基づく温熱環境シミュレーションシステムです。"
  },
  "manual/devMan.html": {
    "href": "manual/devMan.html",
    "title": "環境構築手順・インストール",
    "keywords": "環境構築手順・インストール 本書では日射や風況等に基づく温熱環境シミュレーションシステム（以下「本システム」という。）の利用環境構築手順について記載しています。 本システムの構成や仕様の詳細については以下も参考にしてください。 技術検証レポート 1. 事前準備・推奨条件 はじめに、本システムを利用する際は、 動作環境 で示すサーバマシン内の構成を２台のマシンに分けて構成することを推奨します。また、OSはどちらのマシンもUbuntuを推奨します。 上記に伴い、本書では２台のサーバマシンを以下のように定義し、構築手順を記載します。 コンテナ管理用マシン Webコンテナ、DBコンテナ、Wrapperコンテナを管理するマシン コンテナ管理用マシンに接続されたファイルストレージ Webコンテナ、DBコンテナ、Wrapperコンテナから参照できるファイルサーバーやストレージ ※本システムのファイルストレージは、コンテナ管理用マシンにアクセスできる環境であれば、コンテナ管理用マシンに接続したハードディスク、または別のNASやパブリッククラウドサービス（Amazon EFS等）のいずれを利用しても問題ございません。そのため、本書でのインストール手順の詳細は省略します。 シミュレータ用マシン 熱流体シミュレーションの稼働に十分なスペックであるマシン 1.1. データベース情報の検討 本システムの環境構築を効率よく進めていくうえで、データベース情報を事前に定義しておくことを推奨します。 下記、３点を検討し、手元に記録または管理してください。 DB USER DB PASSWORD DB NAME 1.2. ファイルストレージのマウント コンテナ管理用マシンに接続されたファイルストレージをコンテナ管理用マシンの/mntにマウントしてください。 マウント方法はストレージによって異なるため、本書では省略いたします。 1.3. Dockerインストール 本システムのコンテナ管理用マシンでは、Docker Engine および Docker Composeを利用します。 未インストールの方は以下参考にインストールから実施してください。 Docker Engine 詳細は、 公式サイト をご覧ください。 本書では、新しいマシンに初めてDocker エンジンをインストールすることを想定し、公式サイトでも紹介されている aptリポジトリを使用したインストール方法を記載します。 以下手順に沿って、コマンドを実行してください。 Docker の'apt'リポジトリを設定 # Add Docker's official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update Docker パッケージのインストール sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin インストール成功確認 sudo docker run hello-world Docker Compose 詳細は、 公式サイト をご覧ください。 本書では、Docker Engine をインストールした人が続けて Docker Compose をインストールすることを想定し、上記と同様に公式サイトでも紹介されている aptリポジトリを使用したインストール方法を記載します。 以下手順に沿って、コマンドを実行してください。 パッケージインデックスの更新 sudo apt-get update Docker Compose のインストール sudo apt-get install docker-compose-plugin インストール成功確認 docker compose version 2. 動作環境 本システムは、利用者端末であるクライアントPCおよびネットワーク接続するサーバマシンの各ハードウェアより構成されます。サーバマシンでは複数のマシン（コンテナ）から構成され、うちWebコンテナがクライアントPC上のブラウザに対してウェブアプリをホストし、他のコンテナはWebコンテナと結合して諸機能を提供します。 動作環境は以下のとおりです。 2.1. クライアントPC 項目 最小動作環境 推奨動作環境 ブラウザ JavaScript、jQuery、CesiumJS対応ブラウザ Google Chrome 120.0以上 ディスプレイ解像度 1024×768以上 1920×1080以上 ネットワーク 以下のURLを閲覧可能。 ・サーバマシンのWebアプリ ・PLATEAU-3DTilesの配信サービス インターネット接続 2.2. コンテナ管理用マシン - Webコンテナ 項目 最小動作環境 推奨動作環境 OS Ubuntu Dockerファイルに依り立ち上げた仮想環境 ネットワーク クライアントPCとHTTPSでのネットワーク接続 インターネット接続、ファイアウォール設置 ネットワーク DBコンテナ、ファイルストレージとのネットワーク接続 サーバマシン内でのVPN 2.3. コンテナ管理用マシン - DBコンテナ 項目 最小動作環境 推奨動作環境 DBMS PostgresSQL 同左 ネットワーク Webコンテナ、Wrapperコンテナとのネットワーク接続 サーバマシン内でのVPN 2.4. コンテナ管理用マシン - ファイルストレージ 項目 最小動作環境 推奨動作環境 ファイルシステム Ubuntu（Webコンテナ、Wrapperコンテナ）がマウント可能なファイルシステム Amazon EFSやsamba ネットワーク Webコンテナ、Wrapperコンテナとのネットワーク接続 サーバマシン内でのVPN 2.5. コンテナ管理用マシン - Wrapperコンテナ 項目 最小動作環境 推奨動作環境 OS Ubuntu Dockerファイルに依り立ち上げた仮想環境 ネットワーク DBコンテナ、ファイルストレージ、シミュレーショタ用マシンとのネットワーク接続 サーバマシン内でのVPN 2.6. シミュレータ用マシン 項目 最小動作環境 推奨動作環境 OS Ubuntu Dockerファイルに依り立ち上げた仮想環境 ネットワーク Wrapperコンテナとのネットワーク接続 サーバマシン内でのVPN CPU i7 6コア 以上 同左 メモリ 32GB以上 64GB以上 ストレージ 1TB以上 2TB以上 3 ダウンロード 3.1. Dockerコンテナの作成と起動 コンテナ管理用マシン上に、３つのコンテナの作成から起動までを実施します。 まずは、自身でソースファイルを実行することで、コンテナを作成することができます。作成に必要なソースファイル一式は こちら からダウンロード可能です。 GitHubからダウンロードしたソースファイルの構成は以下のようになっています。 ここでは、コンテナ管理用マシン上でコマンドを実行してコンテナを作成するまでの手順を記載します。 GitHub mainブランチからsrc/containerをコピー sudo git clone https://github.com/Project-PLATEAU/Fluid-dynamics-simulator.git src/container ymlファイルの編集 事前準備で検討したデータベース情報をPOSTGRESで始まる以下の３つの設定値に反映します。 vi docker-compose.yml POSTGRES_USER: \"DB USER\" POSTGRES_PASSWORD: \"DB PASSWORD\" POSTGRES_DB: \"DB NAME\" Webコンテナの作成準備 ymlファイルが存在するディレクトリに、srcフォルダを作成します。 その後、Webコンテナで利用するソースファイル一式を こちら からダウンロードします。 cd src sudo git clone https://github.com/Project-PLATEAU/Fluid-dynamics-simulator.git srcWeb Docker コンテナの作成 数分間かけてコンテナが作成されます。 cd container sudo docker compose up 作成確認およびコンテナIDの把握 sudo docker ps -a 出力結果より、Webコンテナ/DBコンテナ/Wrapperコンテナの [ STATUS ] がUPになっていることを確認します。また、英数字12桁で1番左側に出力されている [ CONTAINER ID ] を記録しておきます。 3.2. Webコンテナ 作成したWebコンテナへアクセスし、Webアプリの動作に必要な設定を実施します。 Webコンテナで利用するソースファイル一式は こちら からダウンロード可能です。 Webコンテナへアクセス コンテナ管理用マシン上で、WebコンテナのコンテナIDを入力します。 sudo docker exec -it [Web-CONTAINER ID] /bin/bash 設定ファイルの作成 サンプルファイル[.env.example]を参考に、[.env]を編集します。 サンプルファイルの確認方法 cd srcWeb sudo view .env.example 設定ファイルの新規作成と編集 sudo touch .env sudo vi .env 次に、「APP_KEY」を生成します。 cd srcWeb/bridge-cfd/ php artisan key:generate 生成後、設定ファイルの「APP_KEY」に自動で入力されていることを確認します。 sudo view .env ライブラリのインストール 最後に、ライブラリをインストールします。設定ファイルを作成後に実施します。 cd srcWeb/bridge-cfd/ composer install 3.3. DBコンテナ 作成したDBコンテナへアクセスし、データベースを作成します。 DBコンテナで利用するクエリ一式は こちら からダウンロード可能です。 データベース作成と初期データの投入 まず、Webコンテナにアクセスし、データベースの作成と初期データを投入するために以下２つのコマンドを実行します。初期データ投入後、アカウントが１つ登録されます。 ユーザーID：「testuser」 パスワード：「&ezULtAW3FYa」 # データベースの作成 php artisan migrate --path=/database/migrations/2023_11_01_172302_init_db_ver01.php # 初期データの投入 php artisan db:seed DBコンテナへアクセス コンテナ管理用マシン上で、DBコンテナのコンテナIDを入力します。 sudo docker exec -it [DB-CONTAINER ID] /bin/bash ユーザアカウント登録 pgAdmin 4などのRDBMSからデータベースに接続します。mainブランチの src/query にあるINSERT_USER_ACCOUNT.sql を参考にして、必要なユーザアカウントを登録します。 3.4. シミュレーションマシン OpenFOAM インストール 下記に示す４つのコマンドを順に実行します。 # 1. Add the repository curl https://dl.openfoam.com/add-debian-repo.sh | sudo bash # 2. Update the repository information sudo apt-get update # 3. Install preferred package. Eg, sudo apt-get install openfoam2306-default # 4. .bashrc に OpenFOAM 用のパスを追加 source /usr/lib/openfoam/openfoam2306/etc/bashrc .pemファイルの作成 本システムでは、シミュレーションマシンとWrapperコンテナでSSH接続による通信を利用します。 .pemファイル作成後、シミュレーションマシンのホスト名 or IPアドレスと併せて記録しておきます。 3.5. Wrapperコンテナ 作成したWrapperコンテナへアクセスし、必要な設定を実施します。 Wrapperコンテナで利用するソースファイル一式は こちら からダウンロード可能です。 Wrapperコンテナへアクセス コンテナ管理用マシン上で、WrapperコンテナのコンテナIDを入力します。 sudo docker exec -it [wrapper-CONTAINER ID] /bin/bash GitHub mainブランチから src/srcBatch をコピーします。 mkdir /bridge-plateau-cfd & cd /bridge-plateau-cfd sudo git clone https://github.com/Project-PLATEAU/Fluid-dynamics-simulator.git src/srcBatch bridge-plateau-cfd が作成され、その直下にwrapper_organize.pyなどのpythonプログラム群が配置されていることを確認します。 .pemファイルの作成（任意） 本システムでは、シミュレーションマシンとWrapperコンテナでSSH接続による通信を利用します。 設定ファイルの編集 連携するデータベースの情報とシミュレーションマシンの情報を、設定ファイルに追記します。 事前準備にて検討していたデータベース情報を[WebappDB]セクション以降の下記項目に入力します。 user = DB USER password = DB PASSWORD dbname = DB NAME シミュレーションマシン作成時に記録しておいた情報を[SimEC2]セクション以降の下記項目に入力します。 user = ubuntu (※) host = シミュレーションマシンのホスト名 or IPアドレス key_filename = .pemファイルのパス もし、ファイルストレージを外部で準備した場合は、必要に応じて[PATH]セクションshared_folder_rootの設定値を変更してください。 4 シミュレーション管理ジョブの起動 4.1. crontabの設定 コンテナ管理用マシンで、1分おきにシミュレーション管理ジョブ(wrapper_organize.py)を実行させるための設定をcrontabに入力します。 コンテナ管理用マシン上でcrontab を編集します。下記コマンドを実行したとき、Select an editorと出たら開くEditorを設定してください。 sudo crontab -e ※もし上記コマンド実行後、command not foundが表示された場合は、先に以下のコマンドでcronをインストールしてください。 sudo apt-get update sudo install cron crontabに下記を追記して保存します。 * * * * * docker exec -w /bridge-plateau-cfd <WrapperのContainer ID> sh -c \"/usr/bin/python3 /bridge-plateau-cfd/wrapper_organize.py >> /bridge-plateau-cfd/log/wrapper.log 2>&1\" crontabがサービス起動中であることを確認します。もし、正常に起動していない場合は再起動します。 service cron status （起動確認） service cron restart （再起動） 上記手順を終えたあとに、Wrapperコンテナへログインし、ログが1分おきに出力されていることを確認します。 tail bridge-plateau-cfd/tail log/wrapper.log INFO 2024-02-14 02:46:02,109 [wrapper_organize.py:184] Start wrapper_organize.py INFO 2024-02-14 02:46:02,161 [wrapper_organize.py:204] Complete wrapper_organize.py INFO 2024-02-14 02:47:02,052 [wrapper_organize.py:184] Start wrapper_organize.py INFO 2024-02-14 02:47:02,108 [wrapper_organize.py:204] Complete wrapper_organize.py 5 プリセットデータの登録と疎通確認 プリセットデータの登録を、環境構築後の疎通確認も兼ねてクライアントPC上のブラウザからウェブアプリにアクセスして実施します。 クライアントPC上のブラウザから、[3.2. Webコンテナ 3. 設定ファイルの作成]で設定した[.env]の\"APP_URL\"にアクセスします。 DML（データ投入）で登録したユーザーIDおよびパスワードで、本システムにログインします。 操作マニュアル[4-2 都市モデルの登録]を参考に、 (examples/input)にあるこちらの STLファイルをアップロードします。 操作マニュアル[4-3 シミュレーションモデルの作成]を参考に、シミュレーションモデルの作成およびシミュレーション実行します。 シミュレーションの実行ステータスが「正常終了」となったら、シミュレーション結果を閲覧します。 ダウンロードボタンからGeoJSONファイルをダウンロードし、(examples/output)にある こちらの ファイルと内容が同一であることを確認します。 pgAdmin 4などのRDBMSからデータベースに接続し、都市モデルおよびシミュレーションモデルのプリセットフラグを有効化します。 UPDATE public.city_model SET preset_flag = TRUE; UPDATE public.simulation_model SET preset_flag = TRUE;"
  },
  "manual/userMan.html": {
    "href": "manual/userMan.html",
    "title": "操作マニュアル",
    "keywords": "操作マニュアル 1 本書について 本書では、熱流体シミュレーションシステム（以下「本システム」という。）の操作手順について記載しています。 2 主画面の紹介 2-0 ログイン画面 Webブラウザから所定のURLにアクセスすると、以下のログイン画面が表示されます。 ① ユーザーID 登録済みのユーザーIDを入力します。 ② パスワード 登録済みのパスワードを入力します。 ③ ログインボタン 登録済みのユーザーIDとパスワードを入力後、ログインボタンを押下して本システムへログインします。 2-1 トップ画面 本システムへログインすると以下のシミュレーションモデル一覧画面が表示されます。 ここでは、共通レイアウトについて紹介します。 ① メニュー ホームやシミュレーションモデル一覧、熱流体解析ソルバー一覧など他の一覧画面への遷移が可能です。 ② ログインユーザー表示 現在ログインしているユーザー名が表示されます。編集は不可能です。 ③ ログアウト ログインユーザーを本システムからログアウトし、ログイン画面へ遷移します。 ①のメニューからは4つの画面へ遷移が可能です。 2-2 ホーム画面 2-3 3D都市モデル一覧画面 2-5 シミュレーションモデル一覧画面 2-7 解析ソルバー一覧画面 2-2 ホーム画面 システム管理者からユーザーへ本システムに関する伝達事項など、Webアプリの実装に組み込まれた静的なコンテンツを表示します。 2-3 3D都市モデル一覧画面 ① 追加 基礎自治体や分析対象地域の3D都市モデル追加画面へ遷移します。 ② 閲覧 3D都市モデルを選択した状態でボタン押下することで、3D都市モデル閲覧画面へ遷移します。 ③ 編集 選択されている3D都市モデルに付帯した情報の編集画面へ遷移します。 ④ 削除 選択されている3D都市モデルを本システムより削除し、⑦一覧表を更新します。 ⑤ 共有 選択されている3D都市モデルを他のログインユーザも閲覧可能な状態とします。 ⑥ シミュレーションモデル作成 選択されている3D都市モデルの[ 2-4 シミュレーションモデル作成画面 ]へ遷移します。 ⑦ 一覧表 本システムに登録されている3D都市モデルを一覧表示します。 2-4 シミュレーションモデル作成画面 ① 都市モデル表示 3D都市モデルの識別名の表示欄です。 ② シミュレーションモデル名入力 シミュレーションモデル名（識別名）の入力欄です。 ③ 解析対象地域一覧表 3D都市モデルと紐づき本システムに登録されている解析対象地域を一覧表示します。 ⑤ 追加と戻る シミュレーションモデル名が入力され解析対象地域も選択された状態で追加ボタンを押下すると、新規シミュレーションモデルが本システムに登録されます。 戻るを押下した場合、[2-3 3D都市モデル一覧画面] に遷移します。 2-5 シミュレーションモデル一覧画面 ① 複製 選択されているシミュレーションモデルの一部を複製します。 ② 編集 シミュレーションモデルの編集画面へ遷移します。 ③ 削除 選択されているシミュレーションモデルを本システムより削除し、⑦一覧表を更新します。 ④ 共有 選択されているシミュレーションモデルを他のログインユーザも閲覧可能な状態とします。 ⑤ 公開 選択されているシミュレーションモデルを公開し、ログイン認証なしでアクセスできるURLを提供します。 ⑥ 公開停止 選択されているシミュレーションモデルの公開を停止します。 ⑦ シミュレーション開始 選択されているシミュレーションモデルについてシミュレーションを開始します。 ⑧ ステータス詳細 選択されているシミュレーションモデルについて、シミュレーションの実施状況を確認します。 ⑨ 中止 ステータスが実行中にあるシミュレーションモデルが選択されているとき、中止処理が実行されます。 ⑩ シミュレーション結果閲覧 シミュレーションモデルを選択した状態で押すと、[ 2-6 シミュレーションモデル結果閲覧画面 ]へ遷移します。 ⑪ 一覧表 本システムに登録されているシミュレーションモデルを一覧表示します。 2-6 シミュレーションモデル結果閲覧画面 ① 表示情報選択 表示されるシミュレーションモデルの結果情報を選択できます。 ② 高さ選択 表示されるシミュレーション結果の流速、温度について地表からの高さを選択できます。 ③ シミュレーション結果 ①と②を選択した情報でシミュレーション結果を描画表示します。 ④ 戻る 押下した場合、[ 2-5 シミュレーションモデル一覧画面 ] に遷移します。 ⑤ ダウンロード ①と②で選択した情報のSV5シミュレーション結果（GeoJSON）ファイルをダウンロードします。 ⑥ 凡例 表示情報選択の選択状態に応じて、それぞれの指数に応じた凡例を表示します。 2-7 解析ソルバー一覧画面 ① ソルバ識別名入力欄 ソルバ追加または更新したいときにソルバ識別名を入力します。 ② 説明入力欄 ソルバ追加または更新したいときにソルバに関する説明を入力します。 ③ 追加 追加したいソルバ情報を①に入力しボタン押下することで、解析ソルバーが追加されます。 ④ 更新 更新したいソルバ情報を①に入力しボタン押下することで、解析ソルバーが更新されます。 ⑤ 公開 選択されている解析ソルバーを他ユーザにも公開します。 ⑥ 削除 選択されている解析ソルバーを本システムより削除し、⑦一覧表を更新します。 ⑦ ダウンロード 選択されている解析ソルバーをダウンロードします。 ⑧ 一覧表 本システムに登録されている解析ソルバーを一覧表示します。 3 -基本操作- 都市計画コンサル会社等(エンジニア属性ユーザ)向け 3-1 STLファイルの作成（外部システム操作） 解析対象地域の建物および地形（地表面）の形状データをシステム外で作成します。本システムで熱流体解析処理に利用できるデータフォーマットは、STLファイル形式およびWavefront .objファイル形式です。 エンジニア属性ユーザは、データ変換ツール（例：FME Desktop）を用いて、PLATEAUで提供されているLOD1の3D都市モデルから、前述のいずれかのファイル形式に変換します。このとき建物・地形ごとの排熱効率の違いを加味するために、建物用途や土地利用用途といった主題属性に基づいて建物や地表面のオブジェクトを分類し、複数のファイルを用意します。 STLファイル作成に利用する3D都市モデル（CityGML）の項目を下表に例示します。 地物 地物型 属性区分 属性名 建築物LOD1 bldg:Building 空間属性 bldg:lod1Solid 主題属性 bldg:usage 土地利用 luse:LandUse 主題属性 luse:class 地形LOD1 dem:TINRelief 空間属性 dem:tin 建物のオブジェクトを主題属性（建築物用途）に基づいて分類する方法を下表に例示します。 種別名 建築物用途(bldg:usage) 建物(事務所) 401,421 建物(商業施設) 402,404 建物(宿泊施設) 403 建物(住宅) 411,412,413,414,415 建物(教育施設) 422 建物(その他) 431,441,451,452,453,454,461 地形のオブジェクトを主題属性（土地利用用途）に基づいて分類する方法を下表に例示します。 種別名 土地利用用途(luse:class) 地表面(公園) 217,218 地表面(水面) 204 地表面(道路) 215,216,222,262 地表面(緑地) 201,202,203,205,220,260 地表面(その他) 上記以外 3-2 都市モデルの登録 ログイン後、トップ画面の[ 2-3 3D都市モデル一覧画面 ]で、追加ボタンを押下します。 [ 3D都市モデル追加画面 ]が表示されたら、モデル識別名（3D都市モデル名）の入力および都市モデルの3Dタイルを選択し、追加ボタンを押下します。 新しく追加された行を選択し、編集ボタンを押下します。 [ 3D都市モデル付帯情報編集画面 ]で、[ 3-1 STLファイルの作成 ]で用意したSTLファイルをアップロードします。 情報の追加・編集・削除を終えたら、左下の、戻すボタンを押下します。 4 -基本操作- 地方公共団体職員等(ノンエンジニア属性ユーザ)向け 4-1 シミュレーションモデルの作成 ログイン後、トップ画面の[ 2-3 3D都市モデル一覧画面 ]で、シミュレーションモデル作成ボタンを押下します。 [ 2-4 シミュレーションモデル作成画面 ]が表示されたら、モデル識別名の入力および[ 3-2 都市モデルの登録 ]などで登録した解析対象地域を選択し、追加ボタンを押下します。 4-2 シミュレーションモデルの実行 ログイン後、トップ画面のメニューから[ 2-5 シミュレーションモデル一覧画面 ]へ遷移します。 一覧表示されている中から、実行したいシミュレーションモデルを選択します。 2.で選択した状態のままシミュレーション開始ボタンを押下すると、シミュレーションが開始します。 4-3 シミュレーション結果の閲覧 ログイン後、トップ画面のメニューから[ 2-5 シミュレーションモデル一覧画面 ]へ遷移します。 一覧表示されている中から、シミュレーション実行ステータスが「正常終了」となっているシミュレーションモデルを選択します。 2.で選択した状態のままシミュレーション結果閲覧ボタンを押下すると、シミュレーション結果閲覧画面で風況、中空温度、暑さ指数のシミュレーション結果を閲覧できます。 4-4 シミュレーションモデルの複製と再実行 ログイン後、トップ画面のメニューから[ 2-5 シミュレーションモデル一覧画面 ]へ遷移します。 一覧表示されている中から、複製したいシミュレーションモデルを選択します。このとき、シミュレーション実行ステータスが「正常終了」であることを確認してください。 2.で選択した状態のまま複製ボタンを押下すると、シミュレーション実行ステータスが「未」で新しい行が追加されます。 新しく追加された行を選択し、編集ボタンを押下します。 [ シミュレーションモデル編集画面 ] で、シミュレーション実施条件の「外力等環境条件」を変更します。 「保存に続けてシミュレーションを開始する」にチェックをつけ、保存ボタン押下します。シミュレーションが開始します。 しばらく時間経過後、[ 2-5 シミュレーションモデル一覧画面 ]で更新ボタンを押下します。 [ 4-1 シミュレーション結果の閲覧 ]に記述した手順と同様に、シミュレーション結果を閲覧できます。 4-5 シミュレーション結果の共有 ログイン後、トップ画面のメニューから[ 2-5 シミュレーションモデル一覧画面 ]へ遷移します。 一覧表示されている中から、共有したいシミュレーションモデルを選択します。 2.で選択した状態のまま共有ボタンを押下すると、[ モデル共有画面 ]が表示されます。 共有先のユーザーIDを指定し、共有ボタンを押下します。 共有先のユーザー ： 4.以降で本システムへログインし、[ 2-5 シミュレーションモデル一覧画面 ] へ遷移すると、共有されたシミュレーションモデルが新しく追加されていることを確認できます。 4-6 シミュレーション結果の一般公開 ログイン後、トップ画面のメニューから[2-5 シミュレーションモデル一覧画面 ]へ遷移します。 一覧表示されている中から、公開したいシミュレーションモデルを選択します。 2.で選択した状態のまま公開ボタンを押下すると、一般公開します。 確認方法 ： 公開ボタンを押下したあとに表示されるメッセージダイアログに公開先のURLを別のPCなどからアクセスします。 5 -応用操作- 5-1 GISソフトを用いたシミュレーション結果の表示 [ シミュレーション結果閲覧画面 ]でダウンロードボタンを押下し、GeoJSONファイルをダウンロードします。 【外部システム】 GISソフトウェアでGeoJSONファイルをインポートし、表示します。 5-2 オリジナルソルバの利用 ログイン後、トップ画面のメニューから[ 2-7 解析ソルバー一覧画面 ]へ遷移します。 「標準」ソルバ以外のソルバを選択し、ダウンロードボタンを押下すると、tarファイルがダウンロードされます。 【外部システム】 ダウンロードしたtarファイルを展開します。 【外部システム】 シミュレーションモデル仕様書に基づいて、ソルバやモデルファイルを改変します。 [2-7 解析ソルバー一覧画面]でアップロードボタンを押下し、改変したtarファイルを選択します。 [ シミュレーションモデル編集画面 ]の解析ソルバで、オリジナルソルバを選択します。 以降は、[ 4 基本操作 ]を参考に、シミュレーションモデルの編集やシミュレーション実行、結果の閲覧を行います。"
  }
}